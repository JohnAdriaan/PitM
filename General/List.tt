//
// List.tt
//

#ifndef List_tt
#define List_tt

#include "General.hh"

class _List_ : private _Template_ {
protected: // Classes
   class _Node_;
}; // _List_

template <typename Element>
class List : private _List_ {

public: // Classes

   class Node; friend Node;

public: // Methods

   explicit List(Node Element::*node);

   inline unsigned Count() const;

   Element *Head() const;

   Element *Next(const Element *element) const;

   ~List();

private: // Variables

   Node Element::*node;

   Element *head;

   Element *tail;

   unsigned count;

}; // List

#include "List.Node.ii"

template <typename Element>
List<Element>::List(Node Element::*node) :
               node(node),
               head(nullptr),
               tail(nullptr),
               count(0) {
} // List::List(node)

template <typename Element>
inline unsigned List<Element>::Count() const {
   return count;
} // List::Count()

template <typename Element>
Element *List<Element>::Head() const {
   return head;
} // List::Head()

template <typename Element>
Element *List<Element>::Next(const Element *element) const {
   if (element==nullptr) {
      return nullptr; // Don't start again: that'd loop!
   } // if
   return (element->*node).next;
} // List::Next(Element)

template <typename Element>
List<Element>::~List() {
   while (head!=nullptr) {
      delete head;
   } // while
} // List::~List()

#endif // List_hh
