//
// Atomic.tt
//

#ifndef Atomic_tt
#define Atomic_tt

#include <atomic>

#include "MT.hh"

template <typename Type>
struct MT::Atomic : public std::atomic<Type> {

   Atomic() = default;

   explicit Atomic(Type value);

   // Sets value, and returns old
   Type Swap(Type value);

   // Returns true if was old (in which case it's now value)
   bool Swap(Type value, Type old);

}; // Atomic

template <typename Type>
MT::Atomic<Type>::Atomic(Type value) :
                  std::atomic<Type>(value) {
} // Atomic::Atomic(Type)

template <typename Type>
Type MT::Atomic<Type>::Swap(Type value) {
   return this->exchange(value);
} // Atomic::Swap(value)

template <typename Type>
bool MT::Atomic<Type>::Swap(Type value, Type old) {
   return this->compare_exchange_strong(old, value);
} // Atomic::Swap(value, old)

#endif // Atomic_tt
