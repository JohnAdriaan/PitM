//
// Queue.tt
//
// Usage:
// I wanted two different kinds of Queues, each with two different kinds of Pop() operation.
// The Queue types were either intra-thread or inter-thread (thus thread-safe);
// The Pop() types were either Wait() or return with nothing.
// Since this was going to be a template<> anyway, the first problem was solved by defining
// the type of Mutex to use (Mutex or NoMutex - the default).
// The Pop() was best done with two functions: Pop() and TryPop().
// Warning! Don't mix-n-match calls to these! One type of Queue should only use one type of Pop()!
//

#ifndef Queue_tt
#define Queue_tt

#include "Semaphore.hh"
#include "Mutex.Lock.hh"
#include "NoMutex.Lock.hh"

class MT::_Queue_ : private _Template_ {
protected:
   class _Node_;
}; // _Queue_

template <typename Element, class Mutex=MT::NoMutex>
class MT::Queue : private _Queue_ {

public: // Classes

   // Derive Element off Node
   class Node; friend Node;

public: // Methods

   Queue();

   inline unsigned Count() const;

   bool Push(Element &element);

   // A return of false means that nothing's on the Queue.
   // A return of true may still leave element as nullptr. This means Quit() has been called.
   bool TryPop(Element *&element);

   // If nullptr is returned, that means that Quit() has been called
   Element *Pop();

   void Quit();

   ~Queue();

private: // Methods

   Queue(const Queue &) = delete;

   Element *Get();

private: // Variables

   Mutex mutex;

   MT::Semaphore semaphore;

   Element *head;

   Element *tail;

   unsigned count;

}; // Queue

#include "Queue.Node.ii"

template <typename Element, class Mutex>
MT::Queue<Element,Mutex>::Queue() :
                          mutex(),
                          semaphore(),
                          head(nullptr),
                          tail(nullptr),
                          count(0) {
} // Queue::Queue()

template <typename Element, class Mutex>
inline unsigned MT::Queue<Element,Mutex>::Count() const {
   return count;
} // Queue::Count()

template <typename Element, class Mutex>
bool MT::Queue<Element,Mutex>::Push(Element &element) {
   {
      class Mutex::Lock lock(mutex);
      if (head==nullptr) {
         head = &element;
      } // if
      if (tail!=nullptr) {
         tail->Node::next = &element;
      } // if
      tail = &element;
      ++count;
   }
   semaphore.Post();
   return true;
} // Queue::Push(element)

template <typename Element, class Mutex>
bool MT::Queue<Element,Mutex>::TryPop(Element *&element) {
   if (!semaphore.Try()) {
      return false;
   } // if
   element = Get();
   return true;
} // Queue::TryPop()

template <typename Element, class Mutex>
Element *MT::Queue<Element,Mutex>::Pop() {
   semaphore.Wait();
   return Get();
} // Queue::Pop()

template <typename Element, class Mutex>
void MT::Queue<Element,Mutex>::Quit() {
   semaphore.Post(); // Post semaphore, with nothing to "back" it
} // Queue::Quit()

template <typename Element, class Mutex>
Element *MT::Queue<Element,Mutex>::Get() {
   Element *element;
   {
      class Mutex::Lock lock(mutex);
      element = head;
      if (element==nullptr) {
         return nullptr;
      } // if
      head = element->Node::next;
      if (head==nullptr) {
         tail = nullptr;
      } // if
      --count;
   }
   element->Node::next = nullptr;
   return element;
} // Queue::Get()

template <typename Element, class Mutex>
MT::Queue<Element,Mutex>::~Queue() {
} // Queue::~Queue()

#endif // Queue_tt
